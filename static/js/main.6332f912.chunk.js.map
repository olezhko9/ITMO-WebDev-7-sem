{"version":3,"sources":["components/LoadingSpinner/index.js","components/WeatherCard/index.js","services/weather.js","store/actions.js","components/FavoriteCitiesContainer/index.js","components/App/index.js","serviceWorker.js","store/reducer.js","store/index.js","index.js"],"names":["LoadingSpinner","container","justify","variant","component","align","gutterBottom","sizeUnit","size","color","loading","WeatherCard","props","data","cityWeatherData","isLoading","cod","onFetchError","temperatureCelsius","Math","round","main","temp","Grid","direction","isFavorite","spacing","className","item","xs","md","alignItems","sm","name","Hidden","smUp","Fab","onClick","onRemoveCityClick","bind","this","src","weather","icon","alt","only","Paper","elevation","wind","speed","description","pressure","humidity","coord","lon","lat","fetchWeather","location","url","Array","isArray","length","fetch","then","res","json","FavoriteCities","state","enteredCity","cityName","removeCity","e","city","target","value","setState","removeCityFromFavorite","enqueueSnackbar","autoHideDuration","preventDefault","addCity","Typography","onSubmit","addCityToFavorite","TextField","label","placeholder","margin","onChange","onCityInput","style","marginTop","marginLeft","type","cities","map","cityWeather","index","key","handleCityFetchError","React","Component","withSnackbar","connect","dispatch","a","payload","theme","createMuiTheme","breakpoints","values","lg","xl","App","geoLocationStatus","currentLocationWeather","getLocationWeather","defaultCity","navigator","geolocation","getCurrentPosition","position","coords","latitude","longitude","error","code","PERMISSION_DENIED","console","log","MuiThemeProvider","maxSnack","Container","maxWidth","Button","fullWidth","FavoriteCitiesContainer","Boolean","window","hostname","match","reducer","action","toLowerCase","filter","preloadedState","localStorage","JSON","parse","store","createStore","composeWithDevTools","applyMiddleware","thunk","subscribe","stringify","getState","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6332f912.chunk.js","sourcesContent":["import {Grid} from \"@material-ui/core/index\";\r\nimport Typography from \"@material-ui/core/Typography/index\";\r\nimport {RingLoader} from \"react-spinners/index\";\r\nimport React from \"react\";\r\n\r\n\r\nfunction LoadingSpinner() {\r\n  return (\r\n    <Grid container justify={\"center\"}>\r\n      <Grid container justify={\"center\"}>\r\n        <Typography variant={\"h5\"} component=\"h3\" align={\"center\"} gutterBottom>\r\n          Подождите, данные загружаются\r\n        </Typography>\r\n      </Grid>\r\n      <Grid container justify={\"center\"}>\r\n        <RingLoader\r\n          sizeUnit={\"px\"}\r\n          size={60}\r\n          color={'#123abc'}\r\n          loading={true}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  )\r\n}\r\n\r\nexport default LoadingSpinner;\r\n","import React from 'react';\r\n\r\nimport {Grid, Paper, Fab, Hidden} from \"@material-ui/core\";\r\nimport Typography from '@material-ui/core/Typography/index';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\n\r\nimport LoadingSpinner from '../LoadingSpinner';\r\n\r\nimport './style.sass';\r\n\r\n\r\nexport default function WeatherCard(props) {\r\n  const data = props.cityWeatherData;;\r\n\r\n  if (!data || data && data.isLoading) return (<LoadingSpinner/>);\r\n\r\n  if (data && data.cod != 200) {\r\n    if ('onFetchError' in props) props.onFetchError()\r\n    return (<p>К сожалению, не получилось получить данные о погоде...</p>)\r\n  }\r\n\r\n  if (data && data.cod == 200) {\r\n    const K = 273.15; // для перевода Кельвин в Цельсия\r\n    const temperatureCelsius = Math.round(data.main.temp - K);\r\n\r\n    return (\r\n      <Grid container direction={props.isFavorite ? \"column\" : \"row\"} spacing={4}\r\n            className={`WeatherCard ${props.isFavorite ? \"isFavorite\" : \"\"}`}>\r\n\r\n        <Grid container item xs={12} md={props.isFavorite ? 12 : 6}\r\n              direction={props.isFavorite ? \"row\" : \"column\"} alignItems={\"center\"} className={\"weather-main\"}>\r\n          <Grid container item sm={props.isFavorite ? 4 : false} justify={\"space-between\"}>\r\n            <Typography variant=\"h5\" component=\"h2\">\r\n              <b>{data.name}</b>\r\n            </Typography>\r\n            <Hidden smUp>\r\n              {props.isFavorite &&\r\n              <Fab color=\"primary\" size={\"small\"}\r\n                   onClick={props.onRemoveCityClick.bind(this, props.cityWeatherData.name)}>\r\n                <CloseIcon/>\r\n              </Fab>\r\n              }\r\n            </Hidden>\r\n          </Grid>\r\n          <Grid item container sm={props.isFavorite ? 7 : false} alignItems={\"center\"}\r\n                justify={\"space-evenly\"} className={\"weather-temperature\"}>\r\n            <img src={`http://openweathermap.org/img/wn/${data.weather[0].icon}@2x.png`} alt=\"\"/>\r\n            <Typography variant={props.isFavorite ? \"h3\" : \"h1\"} component=\"h2\">\r\n              {temperatureCelsius}°C\r\n            </Typography>\r\n          </Grid>\r\n          <Hidden only=\"xs\">\r\n            <Grid container item sm={1} justify={\"flex-end\"}>\r\n              {props.isFavorite &&\r\n              <Fab color=\"primary\" size={\"small\"}\r\n                   onClick={props.onRemoveCityClick.bind(this, props.cityWeatherData.name)}>\r\n                <CloseIcon/>\r\n              </Fab>\r\n              }\r\n            </Grid>\r\n          </Hidden>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} md={props.isFavorite ? 12 : 6} className={\"weather-items\"}>\r\n          <Paper elevation={1} className={\"weather-item\"}>\r\n            <span><b>Ветер</b></span>\r\n            <span>{data.wind.speed} м/с</span>\r\n          </Paper>\r\n\r\n          <Paper elevation={1} className={\"weather-item\"}>\r\n            <span><b>Облачность</b></span>\r\n            <span>{data.weather[0].description}</span>\r\n          </Paper>\r\n\r\n          <Paper elevation={1} className={\"weather-item\"}>\r\n            <span><b>Давление</b></span>\r\n            <span>{data.main.pressure} hpa</span>\r\n          </Paper>\r\n\r\n          <Paper elevation={1} className={\"weather-item\"}>\r\n            <span><b>Влажность</b></span>\r\n            <span>{data.main.humidity} %</span>\r\n          </Paper>\r\n\r\n          <Paper elevation={1} className={\"weather-item\"}>\r\n            <span><b>Координаты</b></span>\r\n            <span>[{data.coord.lon}, {data.coord.lat}]</span>\r\n          </Paper>\r\n        </Grid>\r\n      </Grid>\r\n    )\r\n  }\r\n  return null;\r\n}\r\n","export function fetchWeather(location) {\r\n  let url = ''\r\n\r\n  if (Array.isArray(location)) {\r\n    url = `https://api.openweathermap.org/data/2.5/weather?lat=${location[0]}&lon=${location[1]}&appid=263bacc60191ddc5e17b82d2d0c753d4`\r\n  } else if (typeof location === 'string' && location.length) {\r\n    url = `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=263bacc60191ddc5e17b82d2d0c753d4`\r\n  } else return\r\n\r\n  return fetch(url).then(res => res.json())\r\n}\r\n","import {fetchWeather} from \"../services/weather\";\r\n\r\nexport const addCity = (city) => async dispatch => {\r\n  dispatch({\r\n    type: \"ADD_CITY_LOADING\",\r\n    payload: {\r\n      name: city,\r\n      isLoading: true\r\n    }\r\n  });\r\n\r\n  let weather = null;\r\n  try {\r\n    weather = await fetchWeather(city);\r\n\r\n    if (weather.cod != 200) {\r\n      dispatch({\r\n        type: \"ADD_CITY_ERROR\",\r\n        payload: {\r\n          name: city,\r\n          ...weather\r\n        }\r\n      });\r\n    }\r\n    else {\r\n      dispatch({\r\n        type: \"ADD_CITY_SUCCESS\",\r\n        payload: weather\r\n      });\r\n    }\r\n\r\n  } catch (e) {\r\n    dispatch({\r\n      type: \"ADD_CITY_ERROR\",\r\n      payload: {\r\n        name: city,\r\n        ...weather\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport const removeCity = city => ({\r\n  type: \"REMOVE_CITY\",\r\n  payload: city\r\n});\r\n","import React from \"react\";\r\n\r\nimport {Fab, Grid, TextField} from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {withSnackbar} from \"notistack\";\r\n\r\nimport {addCity, removeCity} from \"../../store/actions\";\r\nimport {connect} from 'react-redux';\r\n\r\nimport WeatherCard from \"../WeatherCard\";\r\n\r\n\r\nclass FavoriteCities extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      enteredCity: '',\r\n    }\r\n  }\r\n\r\n  removeCityFromFavorite(cityName) {\r\n    this.props.removeCity(cityName)\r\n  }\r\n\r\n  onCityInput(e) {\r\n    const city = e.target.value\r\n    this.setState({enteredCity: city})\r\n  }\r\n\r\n  handleCityFetchError(city) {\r\n    this.removeCityFromFavorite(city)\r\n    this.props.enqueueSnackbar(`Не удалось получить погоду для города ${city}`, {\r\n      variant: 'error',\r\n      autoHideDuration: 3000\r\n    });\r\n  }\r\n\r\n  addCityToFavorite(e) {\r\n    e.preventDefault()\r\n    if (this.state.enteredCity !== \"\") {\r\n      this.props.addCity(this.state.enteredCity)\r\n      this.setState({enteredCity: ''})\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid>\r\n\r\n        <Grid container component={\"section\"} alignItems={\"center\"}>\r\n          <Grid item xs={12} sm={5}>\r\n            <Typography variant=\"h4\" component=\"h2\">\r\n              Избранное\r\n            </Typography>\r\n          </Grid>\r\n          <Grid container item xs={12} sm={7} className={\"addCityInput\"}>\r\n            <form onSubmit={this.addCityToFavorite.bind(this)}>\r\n              <TextField\r\n                label=\"Добавить новый город\"\r\n                placeholder=\"Город\"\r\n                margin={\"none\"}\r\n                name={\"city\"}\r\n                value={this.state.enteredCity}\r\n                onChange={this.onCityInput.bind(this)}\r\n              />\r\n              <Fab size=\"small\" color=\"primary\" style={{marginTop: '0.5rem', marginLeft: '1rem'}} type={\"submit\"}>\r\n                <AddIcon/>\r\n              </Fab>\r\n            </form>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Grid container spacing={4} component={\"section\"}>\r\n          {this.props.cities.map((cityWeather, index) =>\r\n            <Grid key={index} item xs={12} md={6}>\r\n              <WeatherCard cityWeatherData={cityWeather} isFavorite onRemoveCityClick={this.removeCityFromFavorite.bind(this)}\r\n                           onFetchError={this.handleCityFetchError.bind(this, cityWeather.name)}/>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n\r\n      </Grid>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withSnackbar(\r\n  connect(\r\n    state => ({\r\n      cities: state\r\n    }),\r\n    {\r\n      addCity,\r\n      removeCity\r\n    }\r\n  )(FavoriteCities)\r\n);\r\n\r\n","import React from 'react';\r\nimport './App.css';\r\n\r\nimport {Container, Grid, Button, createMuiTheme, MuiThemeProvider} from '@material-ui/core'\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { SnackbarProvider } from 'notistack';\r\n\r\nimport WeatherCard from \"../WeatherCard\";\r\nimport FavoriteCitiesContainer from \"../FavoriteCitiesContainer\";\r\nimport {fetchWeather} from \"../../services/weather\";\r\n\r\n\r\nconst theme = createMuiTheme({\r\n  breakpoints: {\r\n    values: {\r\n      xs: 0,\r\n      sm: 480,\r\n      md: 960,\r\n      lg: 1280,\r\n      xl: 1920\r\n    }\r\n  }\r\n})\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      geoLocationStatus: '',\r\n      currentLocationWeather: null\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getLocationWeather()\r\n  }\r\n\r\n  async getLocationWeather() {\r\n    this.setState({currentLocationWeather: null});\r\n    const defaultCity = 'London'\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (async position => {\r\n          this.setState({\r\n            geoLocationStatus: 'enabled',\r\n            currentLocationWeather: await fetchWeather([position.coords.latitude, position.coords.longitude])\r\n          })\r\n        }),\r\n        async (error) => {\r\n          if (error.code === error.PERMISSION_DENIED) {\r\n            console.log(\"User denied the request for Geolocation.\");\r\n          }\r\n          this.setState({\r\n            geoLocationStatus: 'disabled',\r\n            currentLocationWeather: await fetchWeather(defaultCity)\r\n          })\r\n        });\r\n    } else {\r\n      console.log(\"Geolocation is disabled\")\r\n      this.setState({\r\n        geoLocationStatus: 'disabled',\r\n        currentLocationWeather: await fetchWeather(defaultCity)\r\n      })\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <MuiThemeProvider theme={theme}>\r\n        <SnackbarProvider maxSnack={3}>\r\n          <Container maxWidth={\"lg\"}>\r\n            <Grid container spacing={1} component={\"section\"}>\r\n              <Grid item xs={12} sm={6} md={4}>\r\n                <Typography variant=\"h4\" component=\"h2\">\r\n                  Погода здесь\r\n                </Typography>\r\n              </Grid>\r\n              <Grid container item xs={12} sm={6} md={4}>\r\n                <Button variant=\"contained\" color=\"primary\" fullWidth onClick={this.getLocationWeather.bind(this)}>\r\n                  Обновить геолокацию\r\n                </Button>\r\n              </Grid>\r\n              { this.state.geoLocationStatus === 'disabled' ?\r\n                (\r\n                  <Grid container item xs={12} sm={12} md={12}>\r\n                    <Typography variant=\"h5\" component=\"h3\" color={\"error\"}>\r\n                      Геолокация недоступна\r\n                    </Typography>\r\n                  </Grid>\r\n                ) : ('')\r\n              }\r\n            </Grid>\r\n\r\n            <WeatherCard key={\"default\"} cityWeatherData={this.state.currentLocationWeather} isFavorite={false}/>\r\n\r\n            <FavoriteCitiesContainer/>\r\n\r\n          </Container>\r\n        </SnackbarProvider>\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const reducer = (state = [], action) => {\r\n\r\n  if (action.type === \"ADD_CITY_SUCCESS\") {\r\n    return state.map((city, index) => {\r\n      if (city.name.toLowerCase() === action.payload.name.toLowerCase())\r\n        return action.payload\r\n\r\n      return city\r\n    })\r\n  }\r\n\r\n  else if (action.type === \"ADD_CITY_ERROR\" ) {\r\n\r\n    console.log(action.payload);\r\n    return state.map((city, index) => {\r\n      if (city.name.toLowerCase() === action.payload.name.toLowerCase())\r\n        return action.payload\r\n\r\n      return city\r\n    })\r\n  }\r\n\r\n  else if (action.type === \"ADD_CITY_LOADING\") {\r\n    return [\r\n      ...state,\r\n      action.payload\r\n    ];\r\n  }\r\n\r\n  else if (action.type === \"REMOVE_CITY\") {\r\n    return state.filter(city => city.name !== action.payload)\r\n  }\r\n\r\n  return state;\r\n}\r\n\r\nexport default reducer;\r\n","import {createStore, applyMiddleware} from \"redux\";\r\nimport thunk from 'redux-thunk'\r\nimport {composeWithDevTools} from \"redux-devtools-extension\";\r\n\r\nimport reducer from \"./reducer\";\r\n\r\nconst STORAGE_KEY = 'weather-cities'\r\nconst preloadedState = localStorage[STORAGE_KEY] ? JSON.parse(localStorage[STORAGE_KEY]) : []\r\n\r\nconst store = createStore(\r\n  reducer,\r\n  preloadedState,\r\n  composeWithDevTools(applyMiddleware(thunk))\r\n);\r\n\r\nstore.subscribe(() => {\r\n  localStorage[STORAGE_KEY] = JSON.stringify(store.getState())\r\n})\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux'\r\nimport store from './store'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}